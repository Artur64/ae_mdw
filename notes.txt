#[get("/transactions/rate/<from>/<to>")]
fn transaction_rate(_state: State<MiddlewareServer>, from: String, to: String) -> Json<JsonValue>
            "select count(1), sum(cast(tx->>'amount' as decimal)), date(to_timestamp(time_/1000)) as _date from \
             transactions t, micro_blocks m where \
             m.id=t.micro_block_id and tx_type = 'SpendTx' and \
             date(to_timestamp(time_/1000)) > $1 and \
             date(to_timestamp(time_/1000)) < $2 \
             group by _date order by _date",
            &[&from, &to])?

- use `transaction` table

----------

#[get("/size/height/<height>")]
fn size(_state: State<MiddlewareServer>, height: i32) -> Json<JsonValue>
        "select sum(size) from transactions where block_height <= $1",
        &[&_height],

- use `transactions` table, we need column tx_serialized_size

----------

#[get("/size/current")]
fn current_size(_state: State<MiddlewareServer>) -> Json<JsonValue>

- reuses size()

----------

#[get("/count/height/<height>")]
fn count(_state: State<MiddlewareServer>, height: i32) -> Json<JsonValue>
   "select count(1) from transactions where block_height <= $1"

- use `transactions` table

----------

#[get("/count/current")]
fn current_count(_state: State<MiddlewareServer>) -> Json<JsonValue>

- reuses count()

----------

#[get("/transactions/account/<account>/count?<txtype>")]
fn transaction_count_for_account(
    _state: State<MiddlewareServer>,
    account: String,
    txtype: Option<String>,
) -> Result<Json<JsonValue>, Status>

"
SELECT
    m.time_, t.*
FROM
    transactions t
JOIN
    micro_blocks m ON m.id=t.micro_block_id
WHERE
    m.id = t.micro_block_id AND
   (t.tx->>'sender_id'=$1 OR
    t.tx->>'account_id' = $1 OR
    t.tx->>'ga_id' = $1 OR
    t.tx->>'caller_id' = $1 OR
    t.tx->>'recipient_id'= $1 OR
    t.tx->>'initiator_id'= $1 OR
    t.tx->>'responder_id'= $1 OR
    t.tx->>'from_id'= $1 OR
    t.tx->>'to_id'= $1 OR
    t.tx->>'owner_id' = $1) AND
    t.tx_type ILIKE $2
UNION
SELECT
    m.id, t.*
FROM
    transactions t
JOIN
    name_pointers np ON (
    t.tx->>'sender_id'=np.name_hash OR
    t.tx->>'account_id' = np.name_hash OR
    t.tx->>'ga_id' = np.name_hash OR
    t.tx->>'caller_id' = np.name_hash OR
    t.tx->>'recipient_id'= np.name_hash OR
    t.tx->>'initiator_id'= np.name_hash OR
    t.tx->>'responder_id'= np.name_hash OR
    t.tx->>'from_id'= np.name_hash OR
    t.tx->>'to_id'= np.name_hash OR
    t.tx->>'owner_id' = np.name_hash) AND
    t.tx_type ILIKE $2 AND
    np.pointer_target = $1 AND
    np.pointer_type = 'account_pupkey'
JOIN
    micro_blocks m ON t.micro_block_id=m.id
WHERE
    np.active_from <= t.block_height AND
    np.expires > t.block_height AND
    np.pointer_target = $1 AND
    t.tx_type ILIKE $2
",
    &[&account, &txtype_sql]

- use `transactions` table

----------

#[get("/transactions/account/<account>?<limit>&<page>&<txtype>")]
fn transactions_for_account(
    _state: State<MiddlewareServer>,
    account: String,
    limit: Option<i32>,
    page: Option<i32>,
    txtype: Option<String>,
) -> Result<Json<Vec<JsonValue>>, Status>
"
SELECT
    m.time_, t.*
FROM
    transactions t
JOIN
    micro_blocks m ON m.id=t.micro_block_id
WHERE
    m.id = t.micro_block_id AND
   (t.tx->>'sender_id'=$1 OR
    t.tx->>'account_id' = $1 OR
    t.tx->>'ga_id' = $1 OR
    t.tx->>'caller_id' = $1 OR
    t.tx->>'recipient_id'= $1 OR
    t.tx->>'initiator_id'= $1 OR
    t.tx->>'responder_id'= $1 OR
    t.tx->>'from_id'= $1 OR
    t.tx->>'to_id'= $1 OR
    t.tx->>'owner_id' = $1) AND
    t.tx_type ILIKE $2
UNION
SELECT
    m.id, t.*
FROM
    transactions t
JOIN
    name_pointers np ON (
    t.tx->>'sender_id'=np.name_hash OR
    t.tx->>'account_id' = np.name_hash OR
    t.tx->>'ga_id' = np.name_hash OR
    t.tx->>'caller_id' = np.name_hash OR
    t.tx->>'recipient_id'= np.name_hash OR
    t.tx->>'initiator_id'= np.name_hash OR
    t.tx->>'responder_id'= np.name_hash OR
    t.tx->>'from_id'= np.name_hash OR
    t.tx->>'to_id'= np.name_hash OR
    t.tx->>'owner_id' = np.name_hash) AND
    t.tx_type ILIKE $2 AND
    np.pointer_target = $1 AND
    np.pointer_type = 'account_pupkey'
JOIN
    micro_blocks m ON t.micro_block_id=m.id
WHERE
    np.active_from <= t.block_height AND
    np.expires > t.block_height AND
    np.pointer_target = $1 AND
    t.tx_type ILIKE $2
"

- use `transactions` and `participants` table

----------

#[get("/transactions/account/<sender>/to/<receiver>")]
fn transactions_for_account_to_account(
    _state: State<MiddlewareServer>,
    sender: String,
    receiver: String,
) -> Result<Json<JsonTransactionList>, Status>
"
select * from transactions where \
         tx->>'sender_id'= $1 and \
         tx->>'recipient_id' = $2 \
         order by id desc
",
        [&sender, &receiver]

- use `participants` table

----------

#[get("/transactions/interval/<from>/<to>?<limit>&<page>&<txtype>")]
fn transactions_for_interval(
    _state: State<MiddlewareServer>,
    from: i64,
    to: i64,
    limit: Option<i32>,
    page: Option<i32>,
    txtype: Option<String>,
) -> Result<Json<JsonTransactionList>, Status>
"
SELECT t.* FROM transactions t
WHERE
   t.block_height >= $1 AND
   t.block_height <= $2 AND
   t.tx_type ILIKE $3
ORDER BY
    t.block_height DESC, t.id DESC
LIMIT $4 OFFSET $5
"

- use `transactions` tab

----------

#[get("/micro-blocks/hash/<hash>/transactions/count")]
fn transaction_count_in_micro_block(
    _state: State<MiddlewareServer>,
    hash: String,
) -> Json<JsonValue>

- from node DB - count transactions in micro block

----------

#[get("/contracts/transactions/address/<address>?<limit>&<page>")]
fn transactions_for_contract_address(
    _state: State<MiddlewareServer>,
    address: String,
    limit: Option<i32>,
    page: Option<i32>,
) -> Result<Json<JsonTransactionList>, Status>

"
SELECT t.* FROM transactions t
WHERE t.tx_type='ContractCallTx' AND t.tx->>'contract_id' = $1
UNION SELECT t.* from transactions t JOIN contract_identifiers c ON t.id=c.transaction_id
WHERE contract_identifier= $2
",
  [&address, &address]

- use `participants` tab

----------

#[get("/contracts/transactions/creation/address/<address>")]
fn creation_tx_for_contract_address(address: String) -> Result<Json<Transaction>, Status>
"
SELECT t.* FROM transactions t
JOIN contract_identifiers c ON t.id=c.transaction_id
WHERE c.contract_identifier = $1
",
  [&address]

- use `participants` tab

----------

#[get("/contracts/calls/address/<address>?<limit>&<page>")]
fn calls_for_contract_address(
    _state: State<MiddlewareServer>,
    address: String,
    limit: Option<i32>,
    page: Option<i32>,
) -> Result<Json<Vec<JsonValue>>, Status>
"
SELECT t.hash, contract_id, caller_id, arguments, callinfo, result
FROM contract_calls c join transactions t on t.id=c.transaction_id
WHERE contract_id = $1 ORDER BY t.block_height ASC
",
  [&address]

- use `participants` tab

----------

#[get("/new/generations/<from>/<to>?<limit>&<page>")]
fn generations_by_range2(
    from: i64,
    to: i64,
    limit: Option<i32>,
    page: Option<i32>,
) -> Result<Json<JsonValue>, Status>

- returns [{
            "key_block" : _kb,
            "micro_blocks" : [{
                "micro_block" : mb,
                "transactions" : trans_for_mb(conn, &mb),
            }, ...]
           }, ...]

- use `transactions` table

----------

#[get("/generations/<from>/<to>?<limit>&<page>")]
fn generations_by_range(
    _state: State<MiddlewareServer>,
    from: i64,
    to: i64,
    limit: Option<i32>,
    page: Option<i32>,
) -> Result<Json<JsonValue>, Status> {
  "select k.height, k.beneficiary, k.hash, k.miner, k.nonce::text, k.pow, \
         k.prev_hash, k.prev_key_hash, k.state_hash, k.target, k.time_, k.\"version\", \
         m.hash, m.pof_hash, m.prev_hash, m.prev_key_hash, m.signature, \
         m.state_hash, m.time_, m.txs_hash, m.\"version\", \
         t.block_hash, t.block_height, t.hash, t.signatures, t.tx, t.encoded_tx \
         from key_blocks k left join micro_blocks m on k.id = m.key_block_id \
         left join transactions t on m.id = t.micro_block_id \
         where k.height >={} and k.height <={} \
         order by k.height desc, m.time_ desc limit {} offset {}",
   from, to, limit, offset

- use `transactions` table

----------

#[get("/channels/transactions/address/<address>")]
fn transactions_for_channel_address(
    _state: State<MiddlewareServer>,
    address: String,
) -> Result<Json<JsonTransactionList>, Status>
  "select t.* from transactions t where \
         t.tx->>'channel_id' = '{}' or \
         t.id in (select transaction_id from channel_identifiers where \
         channel_identifier='{}')",
   &[&address, &address]

- use `transaction` and `participant` tables

----------

#[get("/channels/active")]
fn active_channels(_state: State<MiddlewareServer>) -> Json<Vec<String>>
   "select channel_identifier from channel_identifiers where \
           channel_identifier not in \
           (select tx->>'channel_id' from transactions where \
           tx_type in \
           ('ChannelCloseTx', 'ChannelCloseMutualTx', 'ChannelCloseSoloTx', 'ChannelSlashTx')) \
           order by id asc"

- use `transaction` table

----------

#[get("/contracts/all?<limit>&<page>")]
fn all_contracts(
    _state: State<MiddlewareServer>,
    limit: Option<i32>,
    page: Option<i32>,
) -> Json<Vec<JsonValue>>
"
SELECT ci.contract_identifier, t.hash, t.block_height \
       FROM contract_identifiers ci, transactions t WHERE \
       ci.transaction_id=t.id \
       ORDER BY block_height DESC LIMIT {} OFFSET {}
",
   limit_sql, offset_sql

- use `transaction` table

----------

#[get("/oracles/list?<limit>&<page>")]
fn oracles_all(
    _state: State<MiddlewareServer>,
    limit: Option<i32>,
    page: Option<i32>,
) -> JsonValue
"
SELECT REPLACE(tx->>'account_id', 'ak_', 'ok_'), hash, block_height, \
  CASE WHEN tx->'oracle_ttl'->>'type' = 'delta' THEN block_height + (tx->'oracle_ttl'->'value')::text::integer ELSE 0 END, \
         tx FROM transactions \
         WHERE tx_type='OracleRegisterTx' \
         ORDER BY block_height DESC \
         LIMIT {} OFFSET {}
",
        limit_sql, offset_sql,

- use `transaction` table

----------

#[get("/oracles/<hash>?<limit>&<page>")]
fn oracle_requests_responses(
    _state: State<MiddlewareServer>,
    hash: String,
    limit: Option<i32>,
    page: Option<i32>,
) -> JsonValue
"
select oq.query_id, t1.tx, t2.tx, t1.hash, t2.hash, \
         m1.time_, m2.time_ from oracle_queries oq \
         join transactions t1 on oq.transaction_id=t1.id \
         inner join micro_blocks m1 on t1.micro_block_id = m1.id \
         left outer join transactions t2 on t2.tx->>'query_id' = oq.query_id \
         inner join micro_blocks m2 on t2.micro_block_id = m2.id \
         where oq.oracle_id='{}' \
         limit {} offset {}
",
         hash, limit_sql, offset_sql

- use `participants` table

----------

#[get("/reward/height/<height>")]
fn reward_at_height(_state: State<MiddlewareServer>, height: i64) -> JsonValue

- from mnesia DB

----------

#[get("/names/active?<limit>&<page>&<owner>&<reverse>")]
fn active_names(
    _state: State<MiddlewareServer>,
    limit: Option<i32>,
    page: Option<i32>,
    owner: Option<String>,
    reverse: Option<String>,
) -> Json<Vec<Name>>

- names table

----------

#[get("/names?<limit>&<page>&<owner>")]
fn all_names(
    _state: State<MiddlewareServer>,
    limit: Option<i32>,
    page: Option<i32>,
    owner: Option<String>,
) -> Json<Vec<Name>>

- names table

----------

#[get("/names/<query>")]
fn search_names(_state: State<MiddlewareServer>, query: String) -> Json<Vec<Name>>

- names table

----------

#[get("/names/reverse/<account>?<limit>&<page>")]
fn reverse_names(
    _state: State<MiddlewareServer>,
    account: String,
    limit: Option<i32>,
    page: Option<i32>,
) -> Result<Json<Vec<Name>>, Status>

- names table

----------

#[get("/names/auctions/active/count?<sort>&<reverse>&<limit>&<page>&<length>")]
fn active_name_auctions_count(
    _state: State<MiddlewareServer>,
    sort: Option<String>,
    reverse: Option<String>,
    limit: Option<i32>,
    page: Option<i32>,
    length: Option<usize>,
) -> Json<JsonValue>

- names table

----------

#[get("/names/auctions/active?<sort>&<reverse>&<limit>&<page>&<length>")]
fn active_name_auctions(
    _state: State<MiddlewareServer>,
    sort: Option<String>,
    reverse: Option<String>,
    limit: Option<i32>,
    page: Option<i32>,
    length: Option<usize>,
) -> Json<Vec<crate::models::NameAuctionEntry>>

- names table

----------

#[get("/names/auctions/bids/account/<account>?<limit>&<page>")]
fn bids_for_account(
    _state: State<MiddlewareServer>,
    account: String,
    limit: Option<i32>,
    page: Option<i32>,
) -> Json<Vec<crate::models::BidInfoForAccount>>

- from `participant` table

----------

#[get("/names/hash/<name>")]
fn name_for_hash(_state: State<MiddlewareServer>, name: String) -> Json<JsonValue>

- from node DB

----------

#[get("/names/auctions/<name>/info")]
fn info_for_auction(
    _state: State<MiddlewareServer>,
    name: String,
) -> Result<Json<AuctionInfo>, Status>

- from node DB and `participant` table

----------

#[get("/names/auctions/bids/<name>?<limit>&<page>")]
fn bids_for_name(
    _state: State<MiddlewareServer>,
    name: String,
    limit: Option<i32>,
    page: Option<i32>,
) -> Json<Vec<Transaction>>

- from node DB and `participant` table

----------

#[get("/height/at/<millis_since_epoch>")]
fn height_at_epoch(
    _state: State<MiddlewareServer>,
    millis_since_epoch: i64,
) -> Result<Json<JsonValue>, Status>

- use `chain` index

----------

#[get("/status")]
fn status(_state: State<MiddlewareServer>) -> Response

- specific for platform

----------

#[get("/compilers")]
pub fn get_available_compilers() -> JsonValue

- redirects to aesophia node

----------

#[post("/contracts/verify", format = "application/json", data = "<body>")]
pub fn verify_contract(
    _state: State<MiddlewareServer>,
    body: Json<ContractVerification>,
) -> JsonValue

- redirects to aesophia node - compiles and compares if argument matches
